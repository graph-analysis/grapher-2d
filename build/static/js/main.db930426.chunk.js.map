{"version":3,"sources":["../webpack/universalModuleDefinition","components/grapher/index.less","public-path.js","components/grapher/index.jsx","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["root","factory","exports","module","define","amd","window","__POWERED_BY_QIANKUN__","__webpack_public_path__","__INJECTED_PUBLIC_PATH_BY_QIANKUN__","Menu","ContextMenu","defaultLayout","type","preset","animation","props","data","useState","visible","setVisible","menuClick","options","key","name","ZoomInOutlined","icon","ZoomOutOutlined","className","styles","main","width","height","layout","fitView","map","MiniMap","toolbar","Toolbar","onChange","context","option","apis","handleZoomIn","handleZoomOut","bindType","Item","onClick","FishEye","handleEscListener","nodes","id","style","label","value","edges","App","Home","Boolean","location","hostname","match","render","container","ReactDOM","querySelector","document","storeTest","onGlobalStateChange","prev","console","log","setGlobalState","ignore","user","bootstrap","a","mount","unmount","unmountComponentAtNode","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db930426.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@graph-analysis/grapher-2d-main\"] = factory();\n\telse\n\t\troot[\"@graph-analysis/grapher-2d-main\"] = factory();\n})(window, function() {\nreturn ","module.exports = __webpack_public_path__ + \"static/media/index.8ca33760.less\";","if (window.__POWERED_BY_QIANKUN__) {\n  // eslint-disable-next-line no-undef\n  __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n}\n","import React from 'react'\nimport Graphin from '@antv/graphin'\nimport {\n  MiniMap,\n  Toolbar,\n  ContextMenu,\n  FishEye,\n} from '@antv/graphin-components'\nimport { ZoomOutOutlined, ZoomInOutlined } from '@ant-design/icons'\nimport styles from './index.less'\nimport { useState } from 'react'\nconst { Menu } = ContextMenu\n\n\nconst defaultLayout = {\n  type: 'graphin-force',\n  preset: {\n    type: 'concentric',\n  },\n  animation: true,\n}\n\n// 这里是导出的页面父组件\nexport default (props) => {\n  const { data } = props\n\n  const [visible, setVisible] = useState(false)\n  const menuClick = () => {\n    setVisible(!visible)\n  }\n\n  const options = [\n    {\n      key: 'zoomOut',\n      name: (\n        <span>\n          放大 <ZoomInOutlined />\n        </span>\n      ),\n      icon: <ZoomInOutlined />,\n    },\n    {\n      key: 'zoomIn',\n      name: <ZoomOutOutlined />,\n    },\n  ]\n\n  const toolbarClick = (\n    context,\n    option\n  ) => {\n    const { apis } = context\n    const { handleZoomIn, handleZoomOut } = apis\n    if (option.key === 'zoomIn') {\n      handleZoomIn()\n    } else if (option.key === 'zoomOut') {\n      handleZoomOut()\n    }\n  }\n\n  return (\n    \n    <div className={styles.main}>\n      {/*  在组件上可以自定义组件暴露的prop属性 这里我们把需要可视化的数据传入，并且定义了layout布局，自适应画布大小 */}\n      <Graphin width={\"100%\"} height={\"100%\"} data={data} layout={defaultLayout} fitView={true}>\n        {/* 小地图 */}\n        <div className={styles.map}>\n          <MiniMap visible={true} />\n        </div>\n\n        {/* 工具栏 */}\n        <div className={styles.toolbar}>\n          <Toolbar options={options} onChange={toolbarClick} />\n        </div>\n\n        {/* 右键菜单 */}\n        <ContextMenu bindType=\"canvas\">\n          <Menu bindType=\"canvas\">\n            <Menu.Item onClick={menuClick}>开启放大镜</Menu.Item>\n          </Menu>\n        </ContextMenu>\n\n        {/* 放大镜 */}\n        <FishEye options={{}} visible={visible} handleEscListener={menuClick} />\n      </Graphin>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Grapher } from '../components'\n\n\nconst data = {\n  nodes: [\n    {\n      id: 'node-0',\n      style: {\n        label: { value: '初始化节点' },\n      },\n    },\n  ],\n  edges: [],\n}\n\n\nexport default function () {\n  return (\n    <Grapher data={data} />\n  )\n}\n","import Home from \"./pages/Home\"\nimport React from \"react\"\n\n\nexport default function App() {\n  return (\n    <div className=\"app-main\"><Home /></div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './public-path'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nfunction render(props) {\n  const { container } = props\n  ReactDOM.render(<App />, container ? container.querySelector('#root') : document.querySelector('#root'))\n}\n\nfunction storeTest(props) {\n  props.onGlobalStateChange((value, prev) => console.log(`[onGlobalStateChange - ${props.name}]:`, value, prev), true)\n  props.setGlobalState({\n    ignore: props.name,\n    user: {\n      name: props.name,\n    },\n  })\n}\n\nif (!window.__POWERED_BY_QIANKUN__) {\n  render({})\n}\n\nexport async function bootstrap() {\n  console.log('[Grapher] react app bootstraped')\n}\n\nexport async function mount(props) {\n  console.log('[Grapher] props from main framework', props)\n  storeTest(props)\n  render(props)\n}\n\nexport async function unmount(props) {\n  const { container } = props\n  ReactDOM.unmountComponentAtNode(container ? container.querySelector('#root') : document.querySelector('#root'))\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}